{{- if .Values.stack.enabled }}
{{- $sourceInterface := .Values.stack.relay.sourceInterface -}}
{{- $macvlanInterfaceName := printf "%s%s" "macvlan" (.Values.stack.relay.macvlanIntfNumber | default (randNumeric 2)) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.stack.name}}
  namespace: {{ .Release.Namespace | quote }}
spec:
  selector:
    matchLabels:
      {{- with .Values.stack.selector }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
  replicas: 1
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/nginx-configmap.yaml") . | sha256sum }}
      labels:
        {{- with .Values.stack.selector }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if not .Values.stack.service.enabled }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      hostPID: true
      containers:
      - name: {{ .Values.stack.name }}
        image: {{ .Values.stack.image }}
        command: ["/bin/bash", "-xeuc"]
        args:
        - |
          POD_NAMESERVER=$(awk '/nameserver/ {print $2}' /etc/resolv.conf) \
            envsubst '$POD_NAMESERVER' \
            </tmp/nginx.conf.template \
            >/etc/nginx/nginx.conf
          exec nginx -g 'daemon off;'
        ports:
        - containerPort: {{ .Values.hegel.deployment.port }}
          protocol: TCP
          name: {{ .Values.hegel.deployment.portName }}
        - containerPort: {{ .Values.tink.server.deployment.port }}
          protocol: TCP
          name: {{ .Values.tink.server.deployment.portName }}
        - containerPort: {{ .Values.stack.hook.port }}
          protocol: TCP
          name: hook-http
        - containerPort: {{ .Values.smee.http.port }}
          protocol: TCP
          name: {{ .Values.smee.http.name }}
        - containerPort: {{ .Values.smee.tftp.port }}
          protocol: UDP
          name: {{ .Values.smee.tftp.name }}
        - containerPort: {{ .Values.smee.syslog.port }}
          protocol: UDP
          name: {{ .Values.smee.syslog.name }}
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        volumeMounts:
        - mountPath: /tmp
          readOnly: true
          name: nginx-conf
        {{- if .Values.stack.hook.enabled }}
        - mountPath: /usr/share/nginx/html
          name: hook-artifacts
        {{- end }}
      - name: {{ .Values.stack.relay.name }}
        image: {{ .Values.stack.relay.image }}
        args: ["-m", "{{ .Values.stack.relay.presentGiaddrAction }}", "-c", "{{ .Values.stack.relay.maxHopCount }}", "-id", "{{ $macvlanInterfaceName }}", "-iu", "eth0", "-U", "eth0", "smee.{{ .Release.Namespace }}.svc.{{ .Values.stack.clusterDomain }}."]
        ports:
        - containerPort: 67
          protocol: UDP
          name: dhcp
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          capabilities:
            add:
              - NET_RAW
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
            - key: nginx.conf
              path: nginx.conf.template
      {{- if .Values.stack.hook.enabled }}
      - name: hook-artifacts
        hostPath:
          path: {{ .Values.stack.hook.downloadsDest }}
          type: DirectoryOrCreate
      {{- end }}
      initContainers:
      - name: relay-macvlan-interface
        command:
          - /bin/sh
          - -c
          - |
            # This script allows us to listen and respond to DHCP requests on a host network interface and interact with Smee properly.
            # This is used instead of `hostNetwork: true` because the dhcp relay requires clear paths for listening for broadcast traffic
            # and sending/receiving unicast traffic to/from Smee.
            set -xe
            # if sourceInterface is not set use the interface from the default route
            srcInterface="{{ $sourceInterface }}"
            if [ -z "$srcInterface" ]; then
              srcInterface=$(nsenter -t1 -n ip route | awk '/default/ {print $5}' | head -n1)
            fi
            # Create a macvlan interface. TODO: If this fails, try again with a different name?
            nsenter -t1 -n ip link add {{ $macvlanInterfaceName }} link ${srcInterface} type macvlan mode bridge
            # Move the interface into the POD.
            pid=$(echo $$)
            nsenter -t1 -n ip link set {{ $macvlanInterfaceName }} netns ${pid} || nsenter -t1 -n ip link delete {{ $macvlanInterfaceName }}
            # Set the macvlan interface up
            ip link set {{ $macvlanInterfaceName }} up
            # Set the IP address
            ip addr add {{ .Values.stack.loadBalancerIP }}/32 dev {{ $macvlanInterfaceName }} noprefixroute
        image: alpine
        securityContext:
          privileged: true
{{- if .Values.stack.service.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: {{ .Values.stack.name }}
  name: {{ .Values.stack.name }}
  namespace: {{ .Release.Namespace | quote }}
spec:
  type: {{ .Values.stack.service.type }}
  {{- if eq .Values.stack.service.type "LoadBalancer" }}
  {{- if .Values.stack.lbClass }}
  loadBalancerClass: {{ .Values.stack.lbClass }}
  {{- end }}
  loadBalancerIP: {{ .Values.stack.loadBalancerIP }}
  externalTrafficPolicy: Local
  {{- end }}
  ports:
  - name: {{ .Values.hegel.name }}
    port: {{ .Values.hegel.deployment.port }}
    protocol: TCP
  - name: {{ .Values.tink.server.name }}
    port: {{ .Values.tink.server.deployment.port }}
    protocol: TCP
  - name: {{ .Values.stack.hook.name }}
    port: {{ .Values.stack.hook.port }}
    protocol: TCP
  - port: {{ .Values.smee.http.port }}
    protocol: TCP
    name: {{ .Values.smee.http.name }}
  - port: {{ .Values.smee.tftp.port }}
    protocol: UDP
    name: {{ .Values.smee.tftp.name }}
  - port: {{ .Values.smee.syslog.port }}
    protocol: UDP
    name: {{ .Values.smee.syslog.name }}
  - port: 67
    protocol: UDP
    name: dhcp
  selector:
    {{- with .Values.stack.selector }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
{{- end }}
{{- end }}
